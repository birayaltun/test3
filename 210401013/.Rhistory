# 1. state ve Area sütununu faktör tipine çevir
selected_data$state <- as.factor(selected_data$state)
selected_data2$Area <- as.factor(selected_data2$Area)
# 1. state ve Area sütununu faktör tipine çevir
selected_data$state <- as.factor(selected_data$state)
**Ön İşleme Raporu: State Populations by Youth, Adulthood, Gender Dataset and GDP per capita in US states Dataset**
state and Area Sütunu:
# Q5 : Veri mühendisliği
**İki tablonun ülkeler bazında işlenebilmesi için birleştirildi ve yeni oluşan tablo aşağıdaki gibi oluşmuştur.**
# Veri setlerini birleştirme
library(dplyr)
selected_data2 <- myDF2 %>%
select(Area,`2017`)%>%
rename(state=Area)
merged_data <- merge(x=selected_data,y=selected_data2,by="state",all.x = TRUE)
# Örnek gösterim Birleştirilmiş
merged_data
# Örnek gösterim Birleştirilmiş
merged_data
# Q6 : Veri analizi
**Eyaletlerin Nüfuslarına ve GDP lerine Göre Kaç tane ve Hangi Tipte Dükkan Açılabileceğini Gösteren Tablo.**
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000)),
premium_count = ifelse(`2017` >= 50000, ceiling(store_count / 2), 0),
regular_count = store_count - premium_count) %>%
select(state, store_count, premium_count, regular_count)
# Ara sonuçları yazdır
print(result)
return(result)
# calculate_store_count fonksiyonunu güncelleyin
calculate_store_count <- function(data) {
# "United States (States and DC)" satırını filtreleyin
data <- filter(data, state != "United States (States and DC)")
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000)),
premium_count = ifelse(`2017` >= 50000, ceiling(store_count / 2), 0),
regular_count = store_count - premium_count) %>%
select(state, store_count, premium_count, regular_count)
# Ara sonuçları yazdır
print(result)
return(result)
}
# calculate_store_count fonksiyonunu kullanarak dükkân sayılarını hesapla
store_counts <- calculate_store_count(merged_data)
**Eyaletlerin Nüfuslarına Göre Kaç tane Dükkan Açabileceğimi Gösteren Grafik.**
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000))) %>%
select(state, population, store_count)
return(result)
# Fonksiyon tanımı
calculate_store_count <- function(data) {
# "United States (States and DC)" sütununu filtrele
data <- filter(data, state != "United States (States and DC)")
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000))) %>%
select(state, population, store_count)
return(result)
}
# Veri setini birleştirme (merged_data kullanılarak)
merged_store_counts <- calculate_store_count(merged_data)
# Grafik oluşturma
ggplot(merged_store_counts, aes(x = state, y = store_count, fill = state)) +
geom_bar(stat = "identity", color = "black") +
labs(title = "Eyaletlere Göre Hesaplanan Dükkan Sayısı", x = "Eyalet", y = "Dükkan Sayısı") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 1))  # X ekseni etiketlerini 45 derece açılı olarak gösterme
```{r echo=FALSE, message=FALSE, warning=FALSE, results='hide'}
library(testthat)
source("Q4_tests_altun_biray_210401013.R")
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF2 <- read_csv(filename2)
# Grafik çizimi vvvv
plot(Top_5$state, Top_5$population, col = "skyblue", main = "Top 5 City by Population", xlab = "Şehir Adı", ylab = "Toplam Nüfus",las=2,col.lab = "green", col.main = "darkblue")
Top_5$state=as.factor(Top_5$state)
# Q4 : Veri seti ön işlemesi
**State Populations by Youth, Adulthood, and Gender Dataset**  tablosunda age_group=All olan ve gender_group=Both olan sütunları kullanacağım.
```{r echo=FALSE, message=FALSE, warning=FALSE}
library(dplyr)
selected_data <- myDF %>%
filter(gender_group == "Both" & age_group == "All")%>%
select(population,state)
selected_data
#filtered_df
```
**GDP per capita in US states Dataset** tablosunda sadece 2017 yılına ait GDP değerlerini ve Area kısımı ayrı bir tablo gibi ayıklandı.
```{r echo=FALSE, message=FALSE, warning=FALSE}
library(dplyr)
selected_data2 <- myDF2 %>%
select(Area,`2017`)
selected_data2
Tablolarda ham veri setleri okundu ve aşağıdaki adımlar uygulandı :
# Dosyayi ithal et
library(readr)
# 1. state ve Area sütununu faktör tipine çevir
selected_data$state <- as.factor(selected_data$state)
selected_data2$Area <- as.factor(selected_data2$Area)
# 1. state ve Area sütununu faktör tipine çevir
selected_data$state <- as.factor(selected_data$state)
selected_data2$Area <- as.factor(selected_data2$Area)
**Ön İşleme Raporu: State Populations by Youth, Adulthood, Gender Dataset and GDP per capita in US states Dataset**
state and Area Sütunu:
# Q5 : Veri mühendisliği
**İki tablonun ülkeler bazında işlenebilmesi için birleştirildi ve yeni oluşan tablo aşağıdaki gibi oluşmuştur.**
# Veri setlerini birleştirme
library(dplyr)
selected_data2 <- myDF2 %>%
select(Area,`2017`)%>%
rename(state=Area)
merged_data <- merge(x=selected_data,y=selected_data2,by="state",all.x = TRUE)
# Q6 : Veri analizi
**Eyaletlerin Nüfuslarına ve GDP lerine Göre Kaç tane ve Hangi Tipte Dükkan Açılabileceğini Gösteren Tablo.**
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000)),
premium_count = ifelse(`2017` >= 50000, ceiling(store_count / 2), 0),
regular_count = store_count - premium_count) %>%
select(state, store_count, premium_count, regular_count)
**Eyaletlerin Nüfuslarına Göre Kaç tane Dükkan Açabileceğimi Gösteren Grafik.**
library(testthat)
source("Q4_tests_altun_biray_210401013.R")
library(testthat)
source("Q4_tests_altun_biray_210401013.R")
source("Q3_tests_altun_biray_210401013.R")
library(testthat)
source("Q4_tests_altun_biray_210401013.R")
source("Q3_tests_altun_biray_210401013.R")
library(testthat)
source("Q4_tests_altun_biray_210401013.R")
source("Q3_tests_altun_biray_210401013.R")
library(testthat)
source("Q4_tests_altun_biray_210401013.R")
source("Q3_tests_altun_biray_210401013.R")
library(testthat)
source("Q4_tests_altun_biray_210401013.R")
source("Q3_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
library(testthat)
source("Q3_tests_altun_biray_210401013.R")
source("Q4_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
library(testthat)
source("Q3_tests_altun_biray_210401013.R")
source("Q4_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
library(testthat)
source("Q3_tests_altun_biray_210401013.R")
source("Q4_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
library(testthat)
source("Q3_tests_altun_biray_210401013.R")
source("Q4_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
source("Q6_tests_altun_biray_210401013.R")
library(testthat)
source("Q3_tests_altun_biray_210401013.R")
source("Q4_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
source("Q6_tests_altun_biray_210401013.R")
library(testthat)
source("Q3_tests_altun_biray_210401013.R")
source("Q4_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
source("Q6_tests_altun_biray_210401013.R")
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF
myDF2
library(dplyr)
#hist(myDF$population, breaks = 60)
Top_5=myDF%>%
group_by(state)%>%
summarise(population = sum(population))%>%
arrange(desc(population))
Top_5 <- Top_5[-1, ]
Top_5=Top_5 %>%
head(5)
Top_5$state=as.factor(Top_5$state)
par(mar = c(10, 10, 2, 2))
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF2 <- read_csv(filename2)
myDF
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF2 <- read_csv(filename2)
myDF
myDF
library(dplyr)
#hist(myDF$population, breaks = 60)
Top_5=myDF%>%
group_by(state)%>%
summarise(population = sum(population))%>%
arrange(desc(population))
Top_5 <- Top_5[-1, ]
Top_5=Top_5 %>%
head(5)
Top_5$state=as.factor(Top_5$state)
par(mar = c(10, 10, 2, 2))
library(dplyr)
selected_data <- myDF %>%
filter(gender_group == "Both" & age_group == "All")%>%
select(population,state)
selected_data
library(dplyr)
selected_data2 <- myDF2 %>%
select(Area,`2017`)
selected_data2
# Veri setlerini birleştirme
library(dplyr)
selected_data2 <- myDF2 %>%
select(Area,`2017`)%>%
rename(state=Area)
merged_data <- merge(x=selected_data,y=selected_data2,by="state",all.x = TRUE)
# Örnek gösterim Birleştirilmiş
merged_data
# calculate_store_count fonksiyonunu güncelleyin
calculate_store_count <- function(data) {
# "United States (States and DC)" satırını filtreleyin
data <- filter(data, state != "United States (States and DC)")
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000)),
premium_count = ifelse(`2017` >= 50000, ceiling(store_count / 2), 0),
regular_count = store_count - premium_count) %>%
select(state, store_count, premium_count, regular_count)
# Ara sonuçları yazdır
print(result)
return(result)
}
# calculate_store_count fonksiyonunu kullanarak dükkân sayılarını hesapla
store_counts <- calculate_store_count(merged_data)
library(ggplot2)
# Fonksiyon tanımı
calculate_store_count <- function(data) {
# "United States (States and DC)" sütununu filtrele
data <- filter(data, state != "United States (States and DC)")
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000))) %>%
select(state, population, store_count)
return(result)
}
# Veri setini birleştirme (merged_data kullanılarak)
merged_store_counts <- calculate_store_count(merged_data)
# Grafik oluşturma
ggplot(merged_store_counts, aes(x = state, y = store_count, fill = state)) +
geom_bar(stat = "identity", color = "black") +
labs(title = "Eyaletlere Göre Hesaplanan Dükkan Sayısı", x = "Eyalet", y = "Dükkan Sayısı") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 1))  # X ekseni etiketlerini 45 derece açılı olarak gösterme
library(testthat)
source("Q3_tests_altun_biray_210401013.R")
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF2 <- read_csv(filename2)
myDF
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF2 <- read_csv(filename2)
myDF
myDF2
library(dplyr)
#hist(myDF$population, breaks = 60)
Top_5=myDF%>%
group_by(state)%>%
summarise(population = sum(population))%>%
arrange(desc(population))
Top_5 <- Top_5[-1, ]
Top_5=Top_5 %>%
head(5)
Top_5$state=as.factor(Top_5$state)
par(mar = c(10, 10, 2, 2))
library(dplyr)
selected_data <- myDF %>%
filter(gender_group == "Both" & age_group == "All")%>%
select(population,state)
selected_data
library(dplyr)
selected_data2 <- myDF2 %>%
select(Area,`2017`)
selected_data2
library(readr)
library(dplyr)
# Ham veri setini oku
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
# Örnek ön işleme adımları
# 1. state ve Area sütununu faktör tipine çevir
selected_data$state <- as.factor(selected_data$state)
selected_data2$Area <- as.factor(selected_data2$Area)
# Veri setlerini birleştirme
library(dplyr)
selected_data2 <- myDF2 %>%
select(Area,`2017`)%>%
rename(state=Area)
merged_data <- merge(x=selected_data,y=selected_data2,by="state",all.x = TRUE)
# Örnek gösterim Birleştirilmiş
merged_data
# calculate_store_count fonksiyonunu güncelleyin
calculate_store_count <- function(data) {
# "United States (States and DC)" satırını filtreleyin
data <- filter(data, state != "United States (States and DC)")
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000)),
premium_count = ifelse(`2017` >= 50000, ceiling(store_count / 2), 0),
regular_count = store_count - premium_count) %>%
select(state, store_count, premium_count, regular_count)
# Ara sonuçları yazdır
print(result)
return(result)
}
# calculate_store_count fonksiyonunu kullanarak dükkân sayılarını hesapla
store_counts <- calculate_store_count(merged_data)
library(ggplot2)
# Fonksiyon tanımı
calculate_store_count <- function(data) {
# "United States (States and DC)" sütununu filtrele
data <- filter(data, state != "United States (States and DC)")
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000))) %>%
select(state, population, store_count)
return(result)
}
# Veri setini birleştirme (merged_data kullanılarak)
merged_store_counts <- calculate_store_count(merged_data)
# Grafik oluşturma
ggplot(merged_store_counts, aes(x = state, y = store_count, fill = state)) +
geom_bar(stat = "identity", color = "black") +
labs(title = "Eyaletlere Göre Hesaplanan Dükkan Sayısı", x = "Eyalet", y = "Dükkan Sayısı") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 1))  # X ekseni etiketlerini 45 derece açılı olarak gösterme
library(testthat)
source("Q3_tests_altun_biray_210401013.R")
source("Q4_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF2 <- read_csv(filename2)
myDF
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF2 <- read_csv(filename2)
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF2 <- read_csv(filename2)
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF2 <- read_csv(filename2)
source("Q3_tests_altun_biray_210401013.R")
source("Q3_tests_altun_biray_210401013.R")
source("Q4_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
myDF <- read_csv(filename)
myDF
myDF2
library(dplyr)
#hist(myDF$population, breaks = 60)
Top_5=myDF%>%
group_by(state)%>%
summarise(population = sum(population))%>%
arrange(desc(population))
Top_5 <- Top_5[-1, ]
Top_5=Top_5 %>%
head(5)
Top_5$state=as.factor(Top_5$state)
par(mar = c(10, 10, 2, 2))
library(dplyr)
selected_data <- myDF %>%
filter(gender_group == "Both" & age_group == "All")%>%
select(population,state)
selected_data
library(dplyr)
selected_data2 <- myDF2 %>%
select(Area,`2017`)
selected_data2
library(readr)
library(dplyr)
# Ham veri setini oku
# Veri dosyasını internetten indir ve git repo'sunun içine commitle
filename <- "state_pop_by_age_gender.csv"
filename2 <- "bea-gdp-by-state.csv"
# Dosyayi ithal et
library(readr)
# Örnek ön işleme adımları
# 1. state ve Area sütununu faktör tipine çevir
selected_data$state <- as.factor(selected_data$state)
selected_data2$Area <- as.factor(selected_data2$Area)
# Veri setlerini birleştirme
library(dplyr)
selected_data2 <- myDF2 %>%
select(Area,`2017`)%>%
rename(state=Area)
merged_data <- merge(x=selected_data,y=selected_data2,by="state",all.x = TRUE)
# Örnek gösterim Birleştirilmiş
merged_data
# calculate_store_count fonksiyonunu güncelleyin
calculate_store_count <- function(data) {
# "United States (States and DC)" satırını filtreleyin
data <- filter(data, state != "United States (States and DC)")
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000)),
premium_count = ifelse(`2017` >= 50000, ceiling(store_count / 2), 0),
regular_count = store_count - premium_count) %>%
select(state, store_count, premium_count, regular_count)
# Ara sonuçları yazdır
print(result)
return(result)
}
# calculate_store_count fonksiyonunu kullanarak dükkân sayılarını hesapla
store_counts <- calculate_store_count(merged_data)
library(ggplot2)
# Fonksiyon tanımı
calculate_store_count <- function(data) {
# "United States (States and DC)" sütununu filtrele
data <- filter(data, state != "United States (States and DC)")
# Nüfusu 2 milyondan küçük olan eyaletlerde sadece 1 dükkan,
# 2 milyondan yüksek olan eyaletlerde nüfusun 2 milyonun kaç katı olduğuna bakılarak kat sayısı kadar dükkan adedi açılabilir.
result <- data %>%
mutate(store_count = ifelse(population < 2000000, 1, ceiling(population / 2000000))) %>%
select(state, population, store_count)
return(result)
}
# Veri setini birleştirme (merged_data kullanılarak)
merged_store_counts <- calculate_store_count(merged_data)
# Grafik oluşturma
ggplot(merged_store_counts, aes(x = state, y = store_count, fill = state)) +
geom_bar(stat = "identity", color = "black") +
labs(title = "Eyaletlere Göre Hesaplanan Dükkan Sayısı", x = "Eyalet", y = "Dükkan Sayısı") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 1))  # X ekseni etiketlerini 45 derece açılı olarak gösterme
library(testthat)
source("Q3_tests_altun_biray_210401013.R")
source("Q4_tests_altun_biray_210401013.R")
source("Q5_tests_altun_biray_210401013.R")
